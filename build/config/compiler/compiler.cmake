include(${PROJECT_SOURCE_DIR}/build/config/chromeos/args.cmake)
include(${PROJECT_SOURCE_DIR}/build/config/chromeos/ui_mode.cmake)
include(${PROJECT_SOURCE_DIR}/build/config/sanitizers/sanitizers.cmake)
include(${PROJECT_SOURCE_DIR}/build_overrides/build.cmake)

if(CHROMEOS)
else()
  set(CROS_CHROME_SDK OFF)
endif()

set(USE_ANDROID_UNWINDER_V2 OFF)

set(SYMBOL_LEVEL -1)
set(ENABLE_PROFILING OFF)
set(USE_DEBUG_FISSION "default")
if(CMAKE_BUILD_TYPE STREQUAL "Release" AND NOT ANDROID)
  set(EXCLUDE_UNWIND_TABLES ON)
else()
  set(EXCLUDE_UNWIND_TABLES OFF)
endif()

if(ANDROID OR CHROMECAST OR FUCHSIA OR IOS)
  set(OPTIMIZE_FOR_SIZE ON)
else()
  set(OPTIMIZE_FOR_SIZE OFF)
endif()

if(CHROMEOS)
  if(NOT CMAKE_SYSTEM_PROCESSOR STREQUAL "arm")
    set(ENABLE_FRAME_POINTERS ON)
  else()
    set(ENABLE_FRAME_POINTERS OFF)
  endif()
elseif(APPLE OR IOS OR LINUX)
  set(ENABLE_FRAME_POINTERS ON)
elseif(WIN32)
  if(CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "AMD64")
    set(ENABLE_FRAME_POINTERS OFF)
  else()
    set(ENABLE_FRAME_POINTERS ON)
  endif()
elseif(ANDROID)
  if(ENABLE_PROFILING OR
      NOT CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64" OR
      (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86" AND NOT EXCLUDE_UNWIND_TABLES AND OPTIMIZE_FOR_SIZE) OR
      USING_SANITIZER OR
      USE_CALL_GRAPH)
    set(ENABLE_FRAME_POINTERS ON)
  else()
    set(ENABLE_FRAME_POINTERS OFF)
  endif()
else()
  if(USING_SANITIZER OR ENABLE_PROFILING OR CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(ENABLE_FRAME_POINTERS ON)
  else()
    set(ENABLE_FRAME_POINTERS OFF)
  endif()
endif()

if(ENABLE_FRAME_POINTERS)
  set(CAN_UNWIND_WITH_FRAME_POINTERS ON)
else()
  set(CAN_UNWIND_WITH_FRAME_POINTERS OFF)
endif()
if(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm")
  set(CAN_UNWIND_WITH_FRAME_POINTERS OFF)
elseif(WIN32)
  set(CAN_UNWIND_WITH_FRAME_POINTERS OFF)
endif()

if(CAN_UNWIND_WITH_FRAME_POINTERS AND NOT ENABLE_FRAME_POINTERS)
  message(FATAL_ERROR "CAN_UNWIND_WITH_FRAME_POINTERS=${CAN_UNWIND_WITH_FRAME_POINTERS} == ENABLE_FRAME_POINTERS=${ENABLE_FRAME_POINTERS}")
endif()

if(ANDROID AND NOT BUILD_SHARED_LIBS AND NOT ENABLE_FRAME_POINTERS AND CMAKE_SYSTEM_PROCESSOR STREQUAL "arm")
  set(CAN_UNWIND_WITH_CFI_TABLE ON)
else()
  set(CAN_UNWIND_WITH_CFI_TABLE OFF)
endif()

if(ANDROID AND NOT BUILD_SHARED_LIBS AND CMAKE_SYSTEM_PROCESSOR STREQUAL "arm")
  set(ENABLE_ARM_CFI_TABLE ON)
else()
  set(ENABLE_ARM_CFI_TABLE OFF)
endif()

if(SYMBOL_LEVEL LESS -1 OR SYMBOL_LEVEL GREATER 2)
  message(FATAL_ERROR "Invalid symbol_level")
endif()
if(SYMBOL_LEVEL EQUAL -1)
  if(CHROMEOS_DEVICE)
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|i386|i686")
      set(SYMBOL_LEVEL 0)
    else()
      set(SYMBOL_LEVEL 1)
    endif()
  elseif((NOT LINUX AND NOT CHROMEOS AND NOT FUCHSIA) OR CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(SYMBOL_LEVEL 2)
  else()
    set(SYMBOL_LEVEL 0)
  endif()
endif()

if(USE_DEBUG_FISSION AND SYMBOL_LEVEL EQUAL 2)
  set(USE_DEBUG_FISSION ON)
else()
  set(USE_DEBUG_FISSION OFF)
endif()
